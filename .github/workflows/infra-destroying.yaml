name: Polybot Infrastructure Destroy Terraform

on:
  workflow_dispatch:
    inputs:
      us-east-1:
        description: 'N.Virginia (us-east-1)'
        required: false
        type: boolean
      us-east-2:
        description: 'Ohio (us-east-2)'
        required: false
        type: boolean
      environment:
        description: 'Select Environment'
        required: true
        type: choice
        default: 'prod'
        options:
          - 'prod'
          - 'dev'

jobs:
  SetGlobals:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region:
          - us-east-1
          - us-east-2
    outputs:
      country: ${{ steps.set_values.outputs.country }}
      state: ${{ steps.set_values.outputs.state }}
      locality: ${{ steps.set_values.outputs.locality }}
      organization: ${{ steps.set_values.outputs.organization }}
      common_name: ${{ steps.set_values.outputs.common_name }}
    steps:
      - name: Check and Install jq
        run: |
          if ! command -v jq &> /dev/null
          then
            echo "jq could not be found. Installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Download Output JSON file
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.inputs[ matrix.region ] }}/${{ inputs.environment }}/tf-outputs.json
          path: ${{ github.workspace }}

      - name: Extract outputs from file and set as environment variables
        id: set_values
        run: |
          echo "country=$(jq -r '.country' tf-outputs.json)" >> $GITHUB_OUTPUT
          echo "state=$(jq -r '.state' tf-outputs.json)" >> $GITHUB_OUTPUT
          echo "locality=$(jq -r '.locality' tf-outputs.json)" >> $GITHUB_OUTPUT
          echo "organization=$(jq -r '.organization' tf-outputs.json)" >> $GITHUB_OUTPUT
          echo "common_name=$(jq -r '.common_name' tf-outputs.json)" >> $GITHUB_OUTPUT

  Terraform:
    runs-on: ubuntu-latest
    needs:
      - SetGlobals
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        region:
          - us-east-1
          - us-east-2
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.2

      - name: Set Telegram Token
        if: ${{ github.event.inputs[ matrix.region ] == 'true' }}
        run: |
          if [ "${{ matrix.region }}" == 'true' ]; then
            echo "TELEGRAM_TOKEN=${{ secrets.US_EAST_1_TELEGRAM_TOKEN }}" >> $GITHUB_ENV
          elif [ "${{ matrix.region }}" == 'true' ]; then
            echo "TELEGRAM_TOKEN=${{ secrets.US_EAST_2_TELEGRAM_TOKEN }}" >> $GITHUB_ENV
          fi

      - name: Destroying infrastructure
        if: ${{ github.event.inputs[ matrix.region ] == 'true' }}
        working-directory: ./tf_infra
        run: |
          # init terraform
          terraform init

          # select workspace or create if needed
          terraform workspace select ${{ matrix.region }} || terraform workspace new ${{ matrix.region }}

          # tf plan destroy
          terraform plan -var-file="region.${{ matrix.region }}.tfvars" -var "telegram_token_value=${{ env.TELEGRAM_TOKEN }}" -var "country=${{ needs.SetGlobals.outputs.country }}" -var "state=${{ needs.SetGlobals.outputs.state }}" -var "locality=${{ needs.SetGlobals.outputs.locality }}" -var "organization=${{ needs.SetGlobals.outputs.organization }}" -var "common_name=${{ needs.SetGlobals.outputs.common_name }}" -destroy -out region.${{ matrix.region }}.tfplan

          # tf apply
          terraform apply -auto-approve region.${{ matrix.region }}.tfplan
