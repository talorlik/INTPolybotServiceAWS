name: Polybot Microservice Deployment

on:
  workflow_dispatch:
    inputs:
      account:
        description: 'Select AWS Account'
        required: true
        type: choice
        default: '019273956931'
        options:
          - '019273956931'
      region:
        description: 'Select AWS Region'
        required: true
        type: choice
        default: 'us-east-1: N. Virginia'
        options:
          - 'us-east-1: N. Virginia'
          - 'us-east-2: Ohio'
      environment:
        description: 'Select Environment'
        required: true
        type: choice
        default: 'prod'
        options:
          - 'prod'
          - 'dev'

jobs:
  GetRunId:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.set_run_id.outputs.run_id }}
    steps:
      - name: Check and Install curl
        run: |
          if ! command -v curl &> /dev/null
          then
            echo "curl could not be found. Installing curl..."
            sudo apt-get update
            sudo apt-get install -y curl
          else
            echo "curl is already installed."
          fi

      - name: Check and Install jq
        run: |
          if ! command -v jq &> /dev/null
          then
            echo "jq could not be found. Installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Fetch the latest successful workflow run ID from the Infra Deployment
        id: set_run_id
        run: |
          LATEST_SUCCESS=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/talorlik/INTPolybotServiceAWS/actions/workflows/infra-provisioning-main.yaml/runs?status=success&per_page=1" \
            | jq -r '.workflow_runs[0].id')

          echo "run_id=$LATEST_SUCCESS" >> $GITHUB_OUTPUT

          echo "The latest successful run ID is $LATEST_SUCCESS"

  SetGlobals:
    runs-on: ubuntu-latest
    needs:
      - GetRunId
    outputs:
      region_code: ${{ steps.set_region.outputs.region_code }}
      telegram_app_url: ${{ steps.set_values.outputs.telegram_app_url }}
      telegram_secret: ${{ steps.set_values.outputs.telegram_secret }}
      sub_domain_secret: ${{ steps.set_values.outputs.sub_domain_secret }}
      sqs_queue_identify: ${{ steps.set_values.outputs.sqs_queue_identify }}
      sqs_queue_results: ${{ steps.set_values.outputs.sqs_queue_results }}
      bucket_name: ${{ steps.set_values.outputs.bucket_name }}
      bucket_prefix: ${{ steps.set_values.outputs.bucket_prefix }}
      table_name: ${{ steps.set_values.outputs.table_name }}
      ecr_repository_url: ${{ steps.set_values.outputs.ecr_repository_url }}
      image_prefix: ${{ steps.set_values.outputs.image_prefix }}
      key_pair_name: ${{ steps.set_values.outputs.key_pair_name }}
    steps:
      - name: Check and Install jq
        run: |
          if ! command -v jq &> /dev/null
          then
            echo "jq could not be found. Installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Set Region
        id: set_region
        run: |
          SELECTED_REGION="${{ inputs.region }}"
          echo "region_code=${SELECTED_REGION%%:*}" >> $GITHUB_OUTPUT

      - name: Download Output JSON file
        uses: actions/download-artifact@v4
        with:
          name: "${{ steps.set_region.outputs.region_code }}-${{ inputs.environment }}-tf-outputs.json"
          github-token: ${{ secrets.GH_TOKEN }}
          repository: talorlik/INTPolybotServiceAWS
          run-id: ${{ needs.GetRunId.outputs.run_id }}

      - name: Extract outputs from file and set as environment variables
        id: set_values
        env:
          ARTIFACT_NAME: "${{ steps.set_region.outputs.region_code }}-${{ inputs.environment }}-tf-outputs.json"
        run: |
          echo "telegram_app_url=https://$(jq -r '.sub_domain_name' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "telegram_secret=$(jq -r '.telegram_secret_name' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "sub_domain_secret=$(jq -r '.sub_domain_secret_name' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "sqs_queue_identify=$(jq -r '.identify_queue_name' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "sqs_queue_results=$(jq -r '.results_queue_name' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "bucket_name=$(jq -r '.s3_bucket_name' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "bucket_prefix=$(jq -r '.s3_bucket_prefix' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "table_name=$(jq -r '.table_name' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "ecr_repository_url=$(jq -r '.ecr_repository_url' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "image_prefix=$(jq -r '.polybot_image_prefix' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "key_pair_name=$(jq -r '.key_pair_name' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT

  Build:
    runs-on: ubuntu-latest
    needs:
      - SetGlobals
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ needs.SetGlobals.outputs.region_code }}
      ECR_REPOSITORY_URL: ${{ needs.SetGlobals.outputs.ecr_repository_url }}
      IMAGE_AND_TAG: "${{ needs.SetGlobals.outputs.image_prefix }}:${{ github.run_number }}"
      IMAGE_PLUS_TAG: "${{ needs.SetGlobals.outputs.image_prefix }}-${{ github.run_number }}"
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd polybot

          # Login to ECR:
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ inputs.account }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com

          # Build the image
          docker build -t ${{ env.IMAGE_AND_TAG }} .

          # Tag the image for ECR
          docker tag ${{ env.IMAGE_AND_TAG }} ${{ env.ECR_REPOSITORY_URL }}:${{ env.IMAGE_PLUS_TAG }}

          # Push the image to ECR
          docker push ${{ env.ECR_REPOSITORY_URL }}:${{ env.IMAGE_PLUS_TAG }}

  Deploy:
    name: Deploy Latest Poluybot Docker Container
    runs-on: ubuntu-latest
    needs:
      - GetRunId
      - SetGlobals
      - Build
    env:
      ARTIFACT_PREFIX: ${{ needs.SetGlobals.outputs.region_code }}-${{ inputs.environment }}
      LOCAL_PATH: /home/runner/.ssh
      PEM_FILE_NAME: ${{ needs.SetGlobals.outputs.key_pair_name }}.pem
    steps:
      - name: Install Ansible and boto3
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Download SSH Key
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.ARTIFACT_PREFIX }}-${{ env.PEM_FILE_NAME }}"
          github-token: ${{ secrets.GH_TOKEN }}
          repository: talorlik/INTPolybotServiceAWS
          run-id: ${{ needs.GetRunId.outputs.run_id }}
          path: "${{ env.LOCAL_PATH }}"

      - name: Set permissions for SSH Key and Directory
        run: |
          chmod 400 ${{ env.LOCAL_PATH }}/${{ env.PEM_FILE_NAME }}
          chmod 700 ${{ env.LOCAL_PATH }}

      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Run Ansible Playbook
        env:
          AWS_ACCOUNT: ${{ inputs.account }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ needs.SetGlobals.outputs.region_code }}
          TELEGRAM_APP_URL: ${{ needs.SetGlobals.outputs.telegram_app_url }}
          TELEGRAM_SECRET: ${{ needs.SetGlobals.outputs.telegram_secret }}
          SUB_DOMAIN_SECRET: ${{ needs.SetGlobals.outputs.sub_domain_secret }}
          SQS_QUEUE_IDENTIFY: ${{ needs.SetGlobals.outputs.sqs_queue_identify }}
          SQS_QUEUE_RESULTS: ${{ needs.SetGlobals.outputs.sqs_queue_results }}
          BUCKET_NAME: ${{ needs.SetGlobals.outputs.bucket_name }}
          BUCKET_PREFIX: ${{ needs.SetGlobals.outputs.bucket_prefix }}
          TABLE_NAME: ${{ needs.SetGlobals.outputs.table_name }}
          ECR_REPOSITORY_URL: ${{ needs.SetGlobals.outputs.ecr_repository_url }}
          IMAGE_PREFIX: ${{ needs.SetGlobals.outputs.image_prefix }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        working-directory: ${{ github.workspace }}/polybot/ansible
        run: |
          ansible-playbook -i aws_ec2.yaml playbook.yaml --private-key ${{ env.LOCAL_PATH }}/${{ env.PEM_FILE_NAME }}"