- name: Polybot EC2s
  hosts: all
  become: yes
  vars:
    ansible_user: ubuntu
  tasks:
    - name: Get values from environment
      set_fact:
        aws_account: "{{ lookup('env', 'AWS_ACCOUNT') }}"
        aws_region: "{{ lookup('env', 'AWS_REGION') }}"
        telegram_app_url: "{{ lookup('env', 'AWS_REGION') }}"
        telegram_secret: "{{ lookup('env', 'AWS_REGION') }}"
        sub_domain_secret: "{{ lookup('env', 'AWS_REGION') }}"
        sqs_queue_identify: "{{ lookup('env', 'AWS_REGION') }}"
        sqs_queue_results: "{{ lookup('env', 'AWS_REGION') }}"
        bucket_name: "{{ lookup('env', 'AWS_REGION') }}"
        bucket_prefix: "{{ lookup('env', 'AWS_REGION') }}"
        table_name: "{{ lookup('env', 'AWS_REGION') }}"
        ecr_repository_url: "{{ lookup('env', 'ECR_REPOSITORY_URL') }}"
        image_prefix: "{{ lookup('env', 'IMAGE_PREFIX') }}"
        github_run_number: "{{ lookup('env', 'GITHUB_RUN_NUMBER') }}"

    - name: Login to Amazon ECR
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
      shell: |
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ aws_account }}.dkr.ecr.{{ aws_region }}.amazonaws.com

    - name: Pull latest Docker image
      docker_image:
        name: "{{ ecr_repository_url }}:{{ image_prefix }}-{{ github_run_number }}"
        source: pull

    - name: Stop and remove existing container
      docker_container:
        name: polybot
        state: absent

    - name: Run new container
      docker_container:
        name: polybot
        image: "{{ ecr_repository_url }}:{{ image_prefix }}-{{ github_run_number }}"
        state: started
        published_ports:
          - "8443:8443"
        env:
          AWS_DEFAULT_REGION: "{{ aws_region }}"
          TELEGRAM_APP_URL: "{{ telegram_app_url }}"
          TELEGRAM_SECRET: "{{ telegram_secret }}"
          SUB_DOMAIN_SECRET: "{{ sub_domain_secret }}"
          SQS_QUEUE_IDENTIFY: "{{ sqs_queue_identify }}"
          SQS_QUEUE_RESULTS: "{{ sqs_queue_results }}"
          BUCKET_NAME: "{{ bucket_name }}"
          BUCKET_PREFIX: "{{ bucket_prefix }}"
          TABLE_NAME: "{{ table_name }}"
        restart_policy: always
